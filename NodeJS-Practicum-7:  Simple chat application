Creating a simple chat application using `socket.io`

by Amer Jaganjac

Topic: Creating a simple chat application using `socket.io` is a great way to learn about real-time communication in web development. We'll build this in Node.js, so make sure you have Node.js installed on your machine. The steps are as follows:

Step 1: Set Up Your Project

1. Create a new directory for your project:
   Open a terminal and run:
   ```bash
   mkdir socketio-chat-app
   cd socketio-chat-app
   ```

2. Initialize a new Node.js project:
   ```bash
   npm init -y
   ```
   This creates a `package.json` file in your project directory.

3. Install Required Packages:
   You'll need `express` for setting up the server and `socket.io` for real-time communication.
   ```bash
   npm install express socket.io
   ```

Step 2: Create the Server

1. Create a server file:
   In your project directory, create a file named `server.js`.

2. Set up an Express server with Socket.io:
   Open `server.js` and write the following code:
   ```javascript
   const express = require('express');
   const http = require('http');
   const socketIo = require('socket.io');

   const app = express();
   const server = http.createServer(app);
   const io = socketIo(server);

   app.get('/', (req, res) => {
     res.sendFile(__dirname + '/index.html');
   });

   io.on('connection', (socket) => {
     console.log('a user connected');

     socket.on('disconnect', () => {
       console.log('user disconnected');
     });

     socket.on('chat message', (msg) => {
       io.emit('chat message', msg);
     });
   });

   server.listen(3000, () => {
     console.log('listening on *:3000');
   });
   ```
   This code sets up a basic server and socket.io to listen for connections and messages.

Step 3: Create the Frontend

1. Create an `index.html` file:
   In your project directory, create `index.html`.

2. Add HTML and Socket.io script:
   Open `index.html` and add the following:
   ```html
   <!DOCTYPE html>
   <html>
   <head>
     <title>Socket.io Chat App</title>
     <style>
       /* Add some basic styling */
       body { font: 13px Helvetica, Arial; }
       form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }
       form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }
       form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }
       #messages { list-style-type: none; margin: 0; padding: 0; }
       #messages li { padding: 5px 10px; }
       #messages li:nth-child(odd) { background: #eee; }
     </style>
   </head>
   <body>
     <ul id="messages"></ul>
     <form action="">
       <input id="m" autocomplete="off" /><button>Send</button>
     </form>
     <script src="/socket.io/socket.io.js"></script>
     <script src="https://code.jquery.com/jquery-1.11.1.js"></script>
     <script>
       $(function () {
         var socket = io();
         $('form').submit(function(e) {
           e.preventDefault();
           socket.emit('chat message', $('#m').val());
           $('#m').val('');
           return false;
         });
         socket.on('chat message', function(msg){
           $('#messages').append($('<li>').text(msg));
           window.scrollTo(0, document.body.scrollHeight);
         });
       });
     </script>
   </body>
   </html>
   ```
   This is a simple chat interface using HTML and jQuery.

Step 4: Test Your Application

1. Run the server:
   Back in your terminal, run:
   ```bash
   node server.js
   ```

2. Open the chat in your browser:
   Open `http://localhost:3000` in two different browser tabs or windows.

3. Start chatting:
   Type a message in one tab and see it appear in real-time in the other.

That's it! You've created a basic real-time chat application using `socket.io`. This is a simple implementation. You can expand on this by adding features like user authentication, rooms, or saving chat history.

